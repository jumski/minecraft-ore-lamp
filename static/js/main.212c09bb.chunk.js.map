{"version":3,"sources":["logo.png","background.jpg","TextDecoderStream.js","setupReader.js","writeToPort.js","App.js","reportWebVitals.js","index.js"],"names":["tds","start","this","decoder","TextDecoder","encoding","options","transform","chunk","controller","enqueue","decode","stream","_jstds_wm","WeakMap","TextDecoderStream","t","set","get","fatal","ignoreBOM","window","TransformStream","setupReader","port","onLatestLine","lineBuffer","appendStream","WritableStream","write","lines","split","length","pop","line","trim","readable","pipeThrough","pipeTo","writeToPort","str","a","writable","writer","getWriter","textEncoder","TextEncoder","bytes","encode","console","log","releaseLock","PREDEFINED_COLORS","name","color","r","g","b","App","menuItems","useState","currentColor","setCurrentColor","setReadingEnabled","serialPort","setSerialPort","writeColor","message","join","onColorPicked","rgb","navigator","serial","requestPort","open","baudRate","colorWasRead","match","red","green","blue","newColor","Number","map","className","onClick","push","onChange","onChangeComplete","style","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.212c09bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.1bbe2a8c.png\";","export default __webpack_public_path__ + \"static/media/background.16c98ae2.jpg\";","// polyfill copy pasted from https://developer.mozilla.org/en-US/docs/Web/API/TransformStream#Polyfilling_TextEncoderStream_and_TextDecoderStream\nconst tds = {\n  start(){\n    this.decoder = new TextDecoder(this.encoding, this.options)\n  },\n  transform(chunk, controller) {\n    controller.enqueue(this.decoder.decode(chunk, { stream: true }))\n  }\n}\n\nlet _jstds_wm = new WeakMap(); /* info holder */\nclass TextDecoderStream extends window.TransformStream {\n  constructor(encoding = 'utf-8', {...options} = {}) {\n    let t = {...tds, encoding, options}\n\n    super(t)\n    _jstds_wm.set(this, t)\n  }\n  get encoding() {return _jstds_wm.get(this).decoder.encoding}\n  get fatal() {return _jstds_wm.get(this).decoder.fatal}\n  get ignoreBOM() {return _jstds_wm.get(this).decoder.ignoreBOM}\n}\n\nexport default TextDecoderStream;\n","import TextDecoderStream from './TextDecoderStream';\n\nexport default function setupReader(port, onLatestLine) {\n  let lineBuffer = '';\n  let appendStream = new WritableStream({\n    write(chunk) {\n      lineBuffer += chunk;\n\n      let lines = lineBuffer.split('\\n');\n\n      if (lines.length > 1) {\n        lineBuffer = lines.pop();\n        let line = lines.pop().trim()\n        onLatestLine(line);\n      }\n    }\n  });\n\n  port.readable\n    .pipeThrough(new TextDecoderStream())\n    .pipeTo(appendStream);\n}\n\n","\nexport default async function writeToPort(port, str) {\n  if (port && port.writable) {\n    const writer = port.writable.getWriter();\n    const textEncoder = new TextEncoder();\n    const bytes = textEncoder.encode(str);\n\n    console.log('writing to port', str, bytes);\n    await writer.write(bytes);\n    writer.releaseLock();\n  }\n}\n","import './App.scss';\nimport './background.jpg';\nimport logo from './logo.png';\nimport { SliderPicker } from 'react-color';\nimport { useState } from 'react';\nimport setupReader from './setupReader';\nimport writeToPort from './writeToPort';\nimport _, { debounce } from 'lodash';\n\nconst PREDEFINED_COLORS = [\n  { name: 'Redstone', color: { r: 255, g: 0, b: 0 } },\n  { name: 'Emerald', color: { r: 0, g: 255, b: 0 } },\n  { name: 'Lapis Lazuli', color: { r: 0, g: 0, b: 255 } },\n  { name: 'Gold', color: { r: 255, g: 100, b: 0 } },\n  { name: 'Diamond', color: { r: 100, g: 245, b: 228 } },\n]\n\nfunction App() {\n  let [currentColor, setCurrentColor] = useState(false);\n  let [readingEnabled, setReadingEnabled] = useState(true);\n  let [serialPort, setSerialPort] = useState(false);\n\n  function areEqual(c1, c2) {\n    return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b;\n  }\n\n  async function writeColor({ r, g, b }) {\n    const message = [r, g, b].join(',') + \"\\n\";\n    await writeToPort(serialPort, message);\n  }\n\n  function onPickerChange({ rgb }) {\n    setReadingEnabled(false);\n    setCurrentColor(rgb);\n  }\n\n  async function onColorPicked({ rgb }) {\n    setReadingEnabled(false); // stop reading from device so it won't overwrite\n    console.log('rgb', rgb);\n    setCurrentColor(rgb); // just write color so it shows on picker and in other places\n\n    await writeColor(rgb); // send color via serial\n\n    setReadingEnabled(true); // now safe to enable reading again\n  }\n\n  async function connectButtonClicked() {\n    let port = await navigator.serial.requestPort({});\n    await port.open({ baudRate: 9600 });\n    setSerialPort(port);\n\n    let colorWasRead = false;\n\n    setupReader(port, line => {\n      if (!line.match(/\\d+,\\d+,\\d+/)) {\n        return;\n      }\n\n      let [red, green, blue] = line.split(/,/);\n      let newColor = { r: Number(red), g: Number(green), b: Number(blue) };\n\n      if (!colorWasRead) {\n        console.log('newColor', newColor);\n        setCurrentColor(newColor);\n        colorWasRead = true;\n      }\n    });\n  }\n\n  let menuItems;\n  if (currentColor) {\n    menuItems = PREDEFINED_COLORS.map((color) => {\n      return (\n        <div\n          className=\"mc-button full\"\n          key={color.name}\n          onClick={() => onColorPicked({ rgb: color.color }) }>\n          <div className=\"title\">{color.name}</div>\n        </div>\n      );\n    });\n    menuItems.push(<div className=\"picker-container\" key=\"Paleta barw\">\n      <SliderPicker color={currentColor} onChange={onPickerChange} onChangeComplete={onColorPicked}/>\n    </div>);\n  }\n  else {\n    menuItems = [<div className=\"mc-button full\" key=\"Podłącz lampkę!\" onClick={connectButtonClicked}>\n      <div className=\"title\">Podłącz lampkę!</div>\n    </div>];\n  }\n\n  return (\n    <div className=\"App container\">\n      <div className=\"header\">\n        <img style={{}} src={logo} alt=\"Lampka Franka\"/>\n      </div>\n\n      <div className=\"menu mc-menu\">\n        {menuItems}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}